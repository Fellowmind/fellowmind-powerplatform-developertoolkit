var fmfi = fmfi || {}; fmfi.PowerPlatform = fmfi.PowerPlatform || {}, fmfi.PowerPlatform.DeveloperToolkit = fmfi.PowerPlatform.DeveloperToolkit || {}, fmfi.PowerPlatform.DeveloperToolkit.JsLib = fmfi.PowerPlatform.DeveloperToolkit.JsLib || {}, fmfi.PowerPlatform.DeveloperToolkit.JsLib.WebAPI = fmfi.PowerPlatform.DeveloperToolkit.JsLib.WebAPI || function () { Xrm.Utility.getGlobalContext(); var e = function (e) { return null == e }, o = function (e, o, t) { var r = { value: t, writable: !0, enumerable: !0, configurable: !0 }; Object.defineProperty(e, o, r) }, t = function (t, r, i, l, n) { var f = {}, a = null; return e(l) || e(n) || (a = { entityLogicalName: l, id: n }), f.getMetadata = function () { return { boundParameter: "undefined" === a || null === a ? null : "entity", parameterTypes: function (e, t) { var r = {}; return t && t.length > 0 && t.forEach(function (e) { o(r, e.name, { typeName: e.type, structuralProperty: e.category }) }), e && o(r, "entity", { typeName: "mscrm." + e.entityLogicalName, structuralProperty: fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.EntityDataModel_StructuralType.ENTITYTYPE }), r }(a, i), operationType: r, operationName: t } }, a && (f.entity = { entityType: a.entityLogicalName, id: a.id }), i && i.forEach(function (e) { o(f, e.name, e.value) }), f }; return { CRUD: { Create: function (e, o, t, r) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "WebAPI.CRUD.Create: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "WebAPI.CRUD.Create: parameter 'record' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "WebAPI.CRUD.Create: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "WebAPI.CRUD.Create: parameter 'errorCallBack' must be defined!"; Xrm.WebApi.createRecord(e, o).then(t, r) }, RetrieveByID: function (e, o, t, r, i) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "WebAPI.CRUD.RetrieveByID: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "WebAPI.CRUD.RetrieveByID: parameter 'id' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "WebAPI.CRUD.RetrieveByID: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i)) throw "WebAPI.CRUD.RetrieveByID: parameter 'errorCallBack' must be defined!"; Xrm.WebApi.retrieveRecord(e, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.RemoveParenthesisFromGUID(o), t).then(r, i) }, RetrieveByIDSync: async function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "WebAPI.CRUD.RetrieveByIDSync: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "WebAPI.CRUD.RetrieveByIDSync: parameter 'id' must be defined!"; return await function (e, o, t) { return new Promise(function (r, i) { Xrm.WebApi.retrieveRecord(e, o, t).then(function (e) { r(e) }, function (e) { i(e) }) }) }(e, o, t) }, RetrieveMultiple: function (e, o, t, r, i) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "WebAPI.CRUD.RetrieveMultiple: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "WebAPI.CRUD.RetrieveMultiple: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i)) throw "WebAPI.CRUD.RetrieveMultiple: parameter 'errorCallBack' must be defined!"; Xrm.WebApi.retrieveMultipleRecords(e, o, t).then(r, i) }, Update: function (e, o, t, r, i) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "WebAPI.CRUD.Update: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "WebAPI.CRUD.Update: parameter 'id' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "WebAPI.CRUD.Update: parameter 'data' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "WebAPI.CRUD.Update: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i)) throw "WebAPI.CRUD.Update: parameter 'errorCallBack' must be defined!"; Xrm.WebApi.updateRecord(e, o, t).then(r, i) }, UpdateMultiple: function (e, o, t, r, i) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "WebAPI.CRUD.UpdateMultiple: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "WebAPI.CRUD.UpdateMultiple: parameter 'options' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "WebAPI.CRUD.UpdateMultiple: parameter 'data' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "WebAPI.CRUD.UpdateMultiple: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i)) throw "WebAPI.CRUD.UpdateMultiple: parameter 'errorCallBack' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.WebAPI.CRUD.RetrieveMultiple(e, o, null, function (o) { for (var l = 0; l < o.entities.length; l++) { var n = o.entities[l][e + "id"]; fmfi.PowerPlatform.DeveloperToolkit.JsLib.WebAPI.CRUD.Update(e, n, t, function (o) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Info("Entity updated successfully: (" + e + ", " + n + ")") }, function (o) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Error("Error occurred when updating entity (" + e + ", " + n + "): " + o.message), i(o) }) } r() }, function (e) { i(e) }) }, Delete: function (e, o, t, r) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "WebAPI.CRUD.Delete: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "WebAPI.CRUD.Delete: parameter 'id' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "WebAPI.CRUD.Delete: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "WebAPI.CRUD.Delete: parameter 'errorCallBack' must be defined!"; Xrm.WebApi.deleteRecord(e, o).then(t, r) } }, Requests: { ExecuteAction: function (e, o, r, i, l, n) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "WebAPI.Requests.ExecuteAction: parameter 'actionName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l)) throw "WebAPI.Requests.ExecuteAction: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(n)) throw "WebAPI.Requests.ExecuteAction: parameter 'errorCallBack' must be defined!"; if (!fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o) && fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "WebAPI.Requests.ExecuteAction: parameter 'id' must be defined if entityName is defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o) && !fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "WebAPI.Requests.ExecuteAction: parameter 'entityName' must be defined if id is defined!"; !function (e, o, r, i, l, n, f) { var a = t(e, o, r, i, l); Xrm.WebApi.online.execute(a).then(n, f) }(e, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.WebAPI_RequestType.ACTION, i, o, r, l, n) }, ExecuteMultipleActions: function (e, o, r, i, l, n) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "WebAPI.Requests.ExecuteAction: parameter 'actionName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l)) throw "WebAPI.Requests.ExecuteAction: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(n)) throw "WebAPI.Requests.ExecuteAction: parameter 'errorCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "WebAPI.Requests.ExecuteAction: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "WebAPI.Requests.ExecuteAction: parameter 'ids' must be defined!"; !function (e, o, r, i, l, n, f) { for (var a = [], m = 0; m < l.length; m++)a.push(t(e, o, r, i, l[m])); Xrm.WebApi.online.executeMultiple(a).then(n, f) }(e, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.WebAPI_RequestType.ACTION, i, o, r, l, n) } } } }(), fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI || { Listeners: { Field: { RegisterOnChangeEvent: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Listeners.Field.RegisterOnChangeEvent: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Listeners.Field.RegisterOnChangeEvent: parameter 'functionToAdd' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.GetField(e, !0).addOnChange(o) }, UnRegisterOnChangeEvent: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Listeners.Field.RegisterOnChangeEvent: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Listeners.Field.RegisterOnChangeEvent: parameter 'functionToRemove' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.GetField(e, !0).removeOnChange(o) } }, Form: { RegisterOnPreSaveEvent: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Listeners.Form.RegisterOnPreSaveEvent: parameter 'functionToAdd' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.entity.addOnSave(e) }, UnRegisterOnPreSaveEvent: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Listeners.Form.UnRegisterOnPreSaveEvent: parameter 'functionToRemove' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.entity.removeOnSave(e) }, RegisterOnPostSaveEvent: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Listeners.Form.RegisterOnPostSaveEvent: parameter 'functionToAdd' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.entity.addOnPostSave(e) }, UnRegisterOnPostSaveEvent: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Listeners.Form.UnRegisterOnPostSaveEvent: parameter 'functionToRemove' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.entity.removeOnPostSave(e) } }, Tab: { RegisterTabStateChangeEvent: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Listeners.Tab.RegisterTabStateChangeEvent: parameter 'tabName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Listeners.Tab.RegisterTabStateChangeEvent: parameter 'fuctionToAdd' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Tab.GetTab(e, !0).addTabStateChange(o) }, UnRegisterTabStateChangeEvent: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Listeners.Tab.UNRegisterTabStateChangeEvent: parameter 'tabName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Listeners.Tab.UNRegisterTabStateChangeEvent: parameter 'functionToRemove' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Tab.GetTab(e, !0).removeTabStateChange(o) } }, Grid: {}, BPF: {} }, Control: { GetControl: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Control.GetControl: parameter 'controlName' must be defined!"; var t = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().getControl(e); if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) && o) throw "UI.Control.GetControl: control does not exist on form, unable to get control context! (" + e + ")"; return t } }, Form: { GetType: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.getFormType() }, GetForm: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Form.GetForm: parameter 'formName' must be defined!"; for (var o, t = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Form.GetCurrentEntityAllForms(), r = 0; r < t.length; r++) { var i = t[r]; i.getLabel().toLowerCase() == e.toLowerCase() && (o = i) } if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Form.GetForm: form does not exist, unable to return form! (" + e + ")"; return o }, GetCurrentForm: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.formSelector.getCurrentItem() }, GetCurrentEntityAllForms: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.formSelector.items.get() }, Close: function (e) { e ? fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.Save(null, function () { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.close() }, function (e) { throw "UI.Form.Close: " + e.message }) : fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.close() }, IsDirty: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.getIsDirty() }, NavigateToForm: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Form.NavigateToForm: parameter 'formName' must be defined!"; for (var o, t = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Form.GetCurrentForm(), r = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Form.GetCurrentEntityAllForms(), i = 0; i < r.length; i++) { var l = r[i]; l.getLabel().toLowerCase() == e.toLowerCase() && (o = l) } if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Form.NavigateToForm: form does not exist, unable to navigate to form! (" + e + ")"; o.getId() == t.getId() ? fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Warning("Form " + e + " already open.") : o.navigate() }, Refresh: function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Form.Refresh: parameter 'saveBeforeRefresh' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o) || fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) ? fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.refresh(e) : fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.refresh(e).then(o, t) }, GetState: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.getFormType() }, OpenFormExistingRecord: function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Form.OpenFormExistingRecord: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Form.OpenFormExistingRecord: parameter 'id' must be defined!"; var r = null; r = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) ? { entityName: e, entityId: o } : { entityName: e, entityId: o, formId: t }, Xrm.Navigation.openForm(r) }, OpenFormNewRecord: function (e, o, t, r, i) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Form.OpenFormExistingRecord: parameter 'entityName' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o) && (o = !1), fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) && (t = !1); var l = null; l = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i) ? { entityName: e, useQuickCreateForm: o, openInNewWindow: t } : { entityName: e, useQuickCreateForm: o, openInNewWindow: t, formId: i }, Xrm.Navigation.openForm(l, r) }, SetFormFieldsState: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Form.SetFormFieldsState: parameter 'areEnabled' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetRecordAttributes().forEach(function (t) { t.controls.forEach(function (r) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r) || (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o) ? r.setDisabled(!e) : o.includes(t.getName()) || r.setDisabled(!e)) }) }) } }, Field: { GetField: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.GetField: parameter 'fieldName' must be defined!"; var t = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().getAttribute(e); if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) && o) throw "UI.Field.GetField: field does not exist on form, unable to get field context! (" + e + ")"; return t }, GetType: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.GetFieldType: parameter 'fieldName' must be defined!"; var o = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.GetField(e, !0); if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) return null; var t = o.getAttributeType(), r = Object.keys(fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.Field_AttributeType).indexOf(t); if (-1 == r) throw "No enum found based on the value '" + t + "' from fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.Field_AttributeType!"; return Object.keys(fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.Field_AttributeType)[r] }, GetValue: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.GetValue: parameter 'fieldName' must be defined!"; return fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.GetField(e, !0).getValue() }, SetValue: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.SetValue: parameter 'fieldName' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.GetField(e, !0).setValue(o) }, SetLookupValue: function (e, o, t, r) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.SetLookupValue: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Field.SetLookupValue: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.Field.SetLookupValue: parameter 'entityId' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "UI.Field.SetLookupValue: parameter 'name' must be defined!"; var i = [{ id: t, name: r, entityType: o }]; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.SetValue(e, i) }, SetRequirementLevel: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.SetRequirementLevel: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Field.SetRequirementLevel: parameter 'level' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.GetField(e, !0).setRequiredLevel(o) }, SetSubmitMode: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.SetSubmitMode: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Field.SetSubmitMode: parameter 'mode' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.GetField(e, !0).setSubmitMode(o) }, SetFieldState: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.SetFieldState: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Field.SetFieldState: parameter 'isEnabled' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Control.GetControl(e, !0).setDisabled(!o) }, TriggerOnChange: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.TriggerFieldOnChange: parameter 'fieldName' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.GetField(e, !0).fireOnChange() }, IsDirty: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Field.GetValue: parameter 'fieldName' must be defined!"; return fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Field.GetField(e, !0).getIsDirty() } }, Tab: { GetTab: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Tab.GetTab: parameter 'tabName' must be defined!"; var t = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.tabs.get(e); if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) && o) throw "UI.Tab.GetTab: tab does not exist on form, unable to get tab context! (" + e + ")"; return t }, SetVisibility: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Tab.SetVisibility: parameter 'tabName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Tab.SetVisibility: parameter 'isVisible' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Tab.GetTab(e, !0).setVisible(o) }, SetTabFieldsState: function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Tab.SetTabFieldsState: parameter 'tabName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Tab.SetTabFieldsState: parameter 'areEnabled' must be defined!"; for (var r = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Tab.GetTab(e, !0).sections.get(), i = 0; i < r.length; i++)fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Section.SetSectionFieldsState(e, r[i].getName(), o, t) }, IsVisible: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Tab.IsVisible: parameter 'tabName' must be defined!"; return fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Tab.GetTab(e, !0).getVisible() } }, Grid: { ShowSidePaneForSelectedRecord: async function (e, o) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o) && (o = screen.length / 3); var t = parent.Xrm.App.sidePanes; t.state = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.SidePane_State.COLLAPSED, null != t.getPane("selectedRecordPane") && t.getPane("selectedRecordPane").close(); var r = { title: e, canClose: !0, alwaysRended: !1, paneId: "selectedRecordPane", width: o }, i = await t.createPane(r); let l = { pageType: "entityrecord", entityName: fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetEntityName(), entityId: fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetId(!0) }; await i.navigate(l) }, Refresh: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Grid.Refresh: parameter 'gridName' must be defined!"; JsLib.UI.Control.GetControl(e, !0).refresh() } }, Notification: { ShowFormNotification: function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Notification.ShowFormNotification: parameter 'message' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Notification.ShowFormNotification: parameter 'type' must be defined!"; var r = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.GenerateGUID(), i = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.setFormNotification(e, o, r); return i && t && setTimeout(function () { fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Notification.ClearFormNotification(r) }, 1e3 * t), i || fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Error("Error occurred when setting a form notification."), i ? r : null }, ClearFormNotification: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Notification.ClearNotification: parameter 'id' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.clearFormNotification(e) }, ShowInAppNotification: function (e, o, t, r, i, l, n, f) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Notification.ShowInAppNotification: parameter 'title' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Notification.ShowInAppNotification: parameter 'message' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.Notification.ShowInAppNotification: parameter 'durationInSeconds' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "UI.Notification.ShowInAppNotification: parameter 'userId' must be defined!"; var a = null, m = !fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l) && !fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(n); m && fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(f) && (f = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.InAppNotification_NavigationTarget.DIALOG), a = m ? { title: e, body: o, "ownerid@odata.bind": "/systemusers(" + fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.RemoveParenthesisFromGUID(r) + ")", icontype: fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i) ? fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.InAppNotification_IconType.INFO : i, toasttype: 2e8, data: JSON.stringify({ actions: [{ title: l, data: { url: n, navigationTarget: f } }] }) } : { title: e, body: o, "ownerid@odata.bind": "/systemusers(" + fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.RemoveParenthesisFromGUID(r) + ")", icontype: fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i) ? fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.InAppNotification_IconType.INFO : i, toasttype: 2e8 }, fmfi.PowerPlatform.DeveloperToolkit.JsLib.WebAPI.CRUD.Create("appnotification", a, function (e) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Info("In-app notification created successfully: " + e.id) }, function (e) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Error("Error occurred when creating in-app notification: " + e.message) }) }, ShowGlobalNotification: function (e, o, t, r, i, l, n) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Notification.ShowGlobalNotification: parameter 'message' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l)) throw "UI.Notification.ShowGlobalNotification: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(n)) throw "UI.Notification.ShowGlobalNotification: parameter 'errorCallBack' must be defined!"; var f = { type: 2, level: t, message: o, action: fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i) ? null : { actionLabel: e, eventHandler: i }, showCloseButton: !!fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r) || r }; Xrm.App.addGlobalNotification(f).then(function (e) { l(e) }, function (e) { n(e) }) } }, Section: { GetSection: function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Section.GetSection: parameter 'tabName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Section.GetSection: parameter 'sectionName' must be defined!"; var r = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Tab.GetTab(e, !0).sections.get(o); if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r) && t) throw "UI.Section.GetSection: section does not exist on form, unable to get section context! (" + o + ")"; return r }, SetVisibility: function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Section.SetVisibility: parameter 'tabName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Section.SetVisibility: parameter 'sectionName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.Section.SetVisibility: parameter 'isVisible' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Section.GetSection(e, o, !0).setVisible(t) }, SetSectionFieldsState: function (e, o, t, r) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Section.SetSectionFieldsState: parameter 'tabName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Section.SetSectionFieldsState: parameter 'sectionName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.Section.SetSectionFieldsState: parameter 'areEnabled' must be defined!"; for (var i = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Section.GetSection(e, o, !0).controls.get(), l = 0; l < i.length; l++) { var n = i[l].getControlType(); "iframe" != n && "webresource" != n && "subgrid" != n && (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r) ? i[l].setDisabled(!t) : r.includes(i[l]._controlName) || i[l].setDisabled(!t)) } } }, Optionset: { AddOption: function (e, o, t, r) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Optionset.AddOption: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Optionset.AddOption: parameter 'option' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.Optionset.AddOption: parameter 'label' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "UI.Optionset.AddOption: parameter 'index' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Optionset.HasOption(e, o) || fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Control.GetControl(e, !0).addOption({ value: o, text: t }, r) }, RemoveOption: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Optionset.RemoveOption: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Optionset.RemoveOption: parameter 'option' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Optionset.HasOption(e, o) && fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Control.GetControl(e, !0).removeOption(o) }, RemoveOptions: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Optionset.RemoveOptions: parameter 'fieldName' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Control.GetControl(e, !0).clearOptions() }, HasOption: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Optionset.HasOption: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Optionset.HasOption: parameter 'option' must be defined!"; for (var t = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Optionset.GetOptions(e), r = 0; r < t.length; r++)if (t[r].value === o) return !0; return !1 }, GetOptions: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Optionset.GetOptions: parameter 'fieldName' must be defined!"; return fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Control.GetControl(e, !0).getOptions() } }, Lookup: { Prefilter: function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Lookup.Prefilter: parameter 'fieldName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Lookup.Prefilter: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.Lookup.Prefilter: parameter 'fetchXML' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Control.GetControl(e, !0).addPreSearch(function () { fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Control.GetControl(e, !0).addCustomFilter(t, o) }) } }, Dialogue: { ShowAlert: function (e, o, t, r = null, i = null, l, n) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Dialogue.ShowAlert: parameter 'header' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Dialogue.ShowAlert: parameter 'btnText' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.Dialogue.ShowAlert: parameter 'alertText' must be defined!"; var f = { confirmButtonLabel: o, text: t, title: e }, a = null; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r) || fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i) || (a = { height: r, width: i }), fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l) ? Xrm.Navigation.openAlertDialog(f, a) : Xrm.Navigation.openAlertDialog(f, a).then(l, n) }, ShowConfirmation: function (e, o, t, r, i, l) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Dialogue.ShowConfirmation: parameter 'header' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Dialogue.ShowConfirmation: parameter 'btnOKText' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.Dialogue.ShowConfirmation: parameter 'btnCancelText' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "UI.Dialogue.ShowConfirmation: parameter 'confirmationText' must be defined!"; var n = { confirmButtonLabel: o, cancelButtonLabel: t, text: r, title: e }; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i) ? Xrm.Navigation.openConfirmDialog(n, null) : Xrm.Navigation.openConfirmDialog(n, null).then(i, l) }, ShowError: function (e, o, t = null, r, i) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.Dialogue.ShowError: parameter 'errMessage' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.Dialogue.ShowError: parameter 'errDetails' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r) ? fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) ? Xrm.Navigation.openErrorDialog({ message: e, details: o }) : Xrm.Navigation.openErrorDialog({ message: e, details: o, errorCode: t }) : fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) ? Xrm.Navigation.openErrorDialog({ message: e, details: o }).then(r, errorCallBack) : Xrm.Navigation.openErrorDialog({ message: e, details: o, errorCode: t }).then(r, errorCallBack) } }, BPF: { GetProcessContext: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.process }, GetActiveProcess: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.process.getActiveProcess() }, GetActiveProcessName: function () { var e = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.BPF.GetActiveProcess(); return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) ? "" : e.getName() }, GetActiveProcessID: function () { var e = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.BPF.GetActiveProcess(); return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) ? null : e.getId() }, GetActiveProcessStages: function () { var e = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.BPF.GetActiveProcess(); return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) ? null : e.getStages() }, GetActiveProcessCurrentStage: function () { var e = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.BPF.GetActiveProcess(); return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) ? null : e.getActiveStage() }, GetActiveProcessCurrentStageName: function () { var e = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.BPF.GetActiveProcessCurrentStage(); return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) ? "" : e.getName() }, GetActiveProcessCurrentStageID: function () { var e = fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.BPF.GetActiveProcessCurrentStage(); return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) ? null : e.getId() }, SetActiveProcess: function (e, o, t, r) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.BPF.SetActiveProcess: parameter 'processId' must be defined!"; r ? fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.Save(null, function () { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.process.setActiveProcess(e, o) }, function (e) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) || t(e) }) : fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.process.setActiveProcess(e, o) }, SetVisibility: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.BPF.SetVisibility: parameter 'isVisible' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().ui.process.setVisible(e) }, IsVisible: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.BPF.GetProcessContext().getVisible() } }, CustomPage: { OpenFromFormRibbon: function (e, o, t, r, i, l, n) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "UI.CustomPage.OpenFromFormRibbon: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.CustomPage.OpenFromFormRibbon: parameter 'entityId' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.CustomPage.OpenFromFormRibbon: parameter 'customPageLogicalName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "UI.CustomPage.OpenFromFormRibbon: parameter 'customPageType' must be defined!"; Array.isArray(o) ? o[0] = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.RemoveParenthesisFromGUID(o[0]) : o = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.RemoveParenthesisFromGUID(o); var f = { pageType: "custom", name: t, entityName: e, recordId: o }, a = { target: 1 }, m = !fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i), s = !fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l); switch (r) { case fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.CustomPageType.INLINE: a = { target: 1 }; break; case fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.CustomPageType.DIALOG: a.target = 2, a.position = 1, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(n) || (a.title = n), m && s ? (a.width = { value: i, unit: "%" }, a.height = { value: l, unit: "%" }) : m && !s ? a.width = { value: i, unit: "%" } : !m && s ? (a.width = { value: 50, unit: "%" }, a.height = { value: l, unit: "%" }) : a.width = { value: 50, unit: "%" }; break; case fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.CustomPageType.SIDEDIALOG: a.target = 2, a.position = 2, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(n) || (a.title = n), m && s ? (a.width = { value: i, unit: "%" }, a.height = { value: l, unit: "%" }) : m && !s ? a.width = { value: i, unit: "%" } : !m && s ? (a.width = { value: 500, unit: "px" }, a.height = { value: l, unit: "%" }) : a.width = { value: 500, unit: "px" }; break; default: throw "UI.CustomPage.OpenFromFormRibbon: unsupported value '" + r + "' for parameter 'customPageType'!" }Xrm.Navigation.navigateTo(f, a, function () { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Info("Custom page '" + t + "' opened succesfully for entity '" + e + "' with id '" + o + "'.") }, function (r) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Info("Error occurred when opening custom page '" + t + "' for entity '" + e + "' with id '" + o + "': " + r) }) }, OpenFromGridRibbon: function (e, o, t, r, i, l) { if (!fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "UI.CustomPage.OpenFromGridRibbon: parameter 'customPageLogicalName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "UI.CustomPage.OpenFromGridRibbon: parameter 'customPageType' must be defined!"; if (e.length > 1) fmfi.PowerPlatform.DeveloperToolkit.JsLib.UI.Notification.ShowFormNotification("Please select only one record to proceed.", fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.FormNotification_Type.WARNING, 10); else { var n = { pageType: "custom", name: o, recordId: fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.RemoveParenthesisFromGUID(e[0].Id) }; navigationOptions = { target: 1 }; var f = !fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r), a = !fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i); switch (t) { case fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.CustomPageType.INLINE: navigationOptions = { target: 1 }; break; case fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.CustomPageType.DIALOG: navigationOptions.target = 2, navigationOptions.position = 1, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l) || (navigationOptions.title = l), f && a ? (navigationOptions.width = { value: r, unit: "%" }, navigationOptions.height = { value: i, unit: "%" }) : f && !a ? navigationOptions.width = { value: r, unit: "%" } : !f && a ? (navigationOptions.width = { value: 50, unit: "%" }, navigationOptions.height = { value: i, unit: "%" }) : navigationOptions.width = { value: 50, unit: "%" }; break; case fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.CustomPageType.SIDEDIALOG: navigationOptions.target = 2, navigationOptions.position = 2, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l) || (navigationOptions.title = l), f && a ? (navigationOptions.width = { value: r, unit: "%" }, navigationOptions.height = { value: i, unit: "%" }) : f && !a ? navigationOptions.width = { value: r, unit: "%" } : !f && a ? (navigationOptions.width = { value: 500, unit: "px" }, navigationOptions.height = { value: i, unit: "%" }) : navigationOptions.width = { value: 500, unit: "px" }; break; default: throw "UI.CustomPage.OpenFromGridRibbon: unsupported value '" + t + "' for parameter 'customPageType'!" }Xrm.Navigation.navigateTo(n, navigationOptions, function () { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Info("Custom page '" + o + "' opened succesfully for entity '" + entityName + "' with id '" + entityId + "'.") }, function (t) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Info("Error occurred when opening custom page '" + o + "' for entity references '" + JSON.stringify(e) + "': " + t) }) } } } } }, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context || { GetFormContext: function () { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(executionContext)) throw "Unable to access formContext, make sure a global variable 'executionContext' is declared and execution context is passed to it during OnLoad event of the form!"; if (executionContext.getFormContext) return executionContext.getFormContext(); if (executionContext.getAttribute) return executionContext; throw "Context.GetFormContext: type of parameter 'executionContext' is unknown!" }, GetGlobalContext: function () { return parent.Xrm.Utility.getGlobalContext() }, GetClientURL: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetGlobalContext().getClientUrl() }, GetAPIVersion: function () { var e = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetGlobalContext().getVersion(); return e.substring(3, e.indexOf(".") - 1) }, GetAPIUrl: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetClientURL() + "/api/data/" + fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetAPIVersion() }, GetEntityMetadata: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "Context.GetFieldSchemaName: parameter 'entityName' must be defined!"; var o = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetClientURL() + "/api/data/v9.2/EntityDefinitions?$select=LogicalName, SchemaName&$expand=Attributes&$filter=LogicalName eq '" + e + "'", t = new XMLHttpRequest; return t.open("GET", o, !0), t.setRequestHeader("Content-Type", "application/json"), new Promise((e, o) => { t.onreadystatechange = function () { this.readyState === fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.XMLHttpRequest_ReadyState.DONE && (t.onreadystatechange = null, 200 === this.status ? e(JSON.parse(this.response)) : o("Request failed: " + JSON.parse(this.responseText).error.code + " " + JSON.parse(this.responseText).error.message)) }, t.send() }) }, GetFieldMetadata: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "Context.GetFieldSchemaName: parameter 'entityName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "Context.GetFieldSchemaName: parameter 'fieldName' must be defined!"; var t = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetClientURL() + "/api/data/v9.2/EntityDefinitions?$select=LogicalName,SchemaName&$expand=Attributes($select=LogicalName,SchemaName;$filter=LogicalName eq '" + o + "')&$filter=LogicalName eq '" + e + "'", r = new XMLHttpRequest; return r.open("GET", t, !0), r.setRequestHeader("Content-Type", "application/json"), new Promise((e, o) => { r.onreadystatechange = function () { this.readyState === fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.XMLHttpRequest_ReadyState.DONE && (r.onreadystatechange = null, 200 === this.status ? e(JSON.parse(this.response)) : o("Request failed: " + JSON.parse(this.responseText).error.code + " " + JSON.parse(this.responseText).error.message)) }, r.send() }) } }, fmfi.PowerPlatform.DeveloperToolkit.JsLib.CurrentUser = fmfi.PowerPlatform.DeveloperToolkit.JsLib.CurrentUser || { GetUserSettings: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetGlobalContext().userSettings }, GetUserID: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.CurrentUser.GetUserSettings().userId }, GetUserName: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.CurrentUser.GetUserSettings().userName }, GetUserRoles: function () { var e = []; return fmfi.PowerPlatform.DeveloperToolkit.JsLib.CurrentUser.GetUserSettings().roles.forEach(function (o) { e.push(o.name) }), e }, HasRole: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "CurrentUser.HasRole: parameter 'roleName' must be defined!"; for (var o = fmfi.PowerPlatform.DeveloperToolkit.JsLib.CurrentUser.GetUserRoles(), t = 0; t < o.length; t++)if (o[t].toUpperCase() == e.toUpperCase()) return !0; return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger.Warning("CurrentUser.HasRoles: systemuser " + fmfi.PowerPlatform.DeveloperToolkit.JsLib.CurrentUser.GetUserID() + " does not have security role " + e), !1 }, HasRoles: function (e) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "CurrentUser.HasRoles: parameter 'roleNames' must be defined!"; for (var o = e.split(","), t = 0; t < o.length; t++)if (!fmfi.PowerPlatform.DeveloperToolkit.JsLib.CurrentUser.HasRole(o[t])) return !1 } }, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record || { GetRecord: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.entity }, GetRecordAttributes: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetRecord().attributes }, GetEntityReference: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetRecord().getEntityReference() }, GetId: function (e) { return e ? fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.RemoveParenthesisFromGUID(fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetRecord().getId()) : fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetRecord().getId() }, GetEntityName: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetRecord().getEntityName() }, GetMetadata: function () { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetEntityMetadata(fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetEntityName()) }, Save: function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "Record.Save: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "Record.Save: parameter 'errorCallBack' must be defined!"; fmfi.PowerPlatform.DeveloperToolkit.JsLib.Context.GetFormContext().data.save(e).then(o, t) }, SaveSync: function (e) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Record.GetRecord().save(e) } }, fmfi.PowerPlatform.DeveloperToolkit.JsLib.PowerAutomate = fmfi.PowerPlatform.DeveloperToolkit.JsLib.PowerAutomate || { Execute: async function (e, o, t, r) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "PowerAutomate.Execute: parameter 'url' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "PowerAutomate.Execute: parameter 'awaitExecution' must be defined!"; if (t && fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "PowerAutomate.Execute: parameter 'message' must be defined when parameter 'awaitExecution' = true!"; function i(e, o, t, r) { return new Promise(function (i, l) { e.onreadystatechange = function () { this.readyState === fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.XMLHttpRequest_ReadyState.DONE && (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.CloseProgressBar(), e.onreadystatechange = null, 200 === this.status ? i(this.response) : l(this.response)) }, t && fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.ShowProgressBar(r), fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o) ? e.send() : e.send(JSON.stringify(o)) }) } var l = new XMLHttpRequest; return l.open("POST", e, !0), l.setRequestHeader("Content-Type", "application/json"), t ? await i(l, o, !0, r) : i(l, o, !1, null) } }, fmfi.PowerPlatform.DeveloperToolkit.JsLib.HTTP = fmfi.PowerPlatform.DeveloperToolkit.JsLib.HTTP || function () { function e(e, o, t, r, i) { return new Promise(function (l, n) { e.onreadystatechange = function () { this.readyState === fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums.XMLHttpRequest_ReadyState.DONE && (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.CloseProgressBar(), e.onreadystatechange = null, this.status === i ? l(this.response) : n("Request failed: " + this.status + " " + this.statusText)) }, t && fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.ShowProgressBar(r), fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o) ? e.send() : e.send(JSON.stringify(o)) }) } return { POST: async function (o, t, r, i, l, n) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "HTTP.POST: parameter 'url' must be defined!"; if (!(fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) || t instanceof Map)) throw "HTTP.POST: parameter 'headers' type is invalid! Type should be Map!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i)) throw "HTTP.POST: parameter 'awaitExecution' must be defined!"; if (i && fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l)) throw "HTTP.POST: parameter 'message' must be defined when parameter 'awaitExecution' = true!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(n)) throw "HTTP.POST: parameter 'expectedResponseCode' must be defined!"; var f = new XMLHttpRequest; if (f.open("POST", o, !0), f.setRequestHeader("Content-Type", "application/json"), null != t && t.size > 0) for (let [e, o] of t) f.setRequestHeader(e, o); return i ? await e(f, r, !0, l, n) : e(f, r, !1, null, n) }, PUT: async function (o, t, r, i, l, n) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "HTTP.PUT: parameter 'url' must be defined!"; if (!(fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) || t instanceof Map)) throw "HTTP.PUT: parameter 'headers' type is invalid! Type should be Map!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "HTTP.PUT: parameter 'payload' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i)) throw "HTTP.PUT: parameter 'awaitExecution' must be defined!"; if (i && fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(l)) throw "HTTP.PUT: parameter 'message' must be defined when parameter 'awaitExecution' = true!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(n)) throw "HTTP.PUT: parameter 'expectedResponseCode' must be defined!"; var f = new XMLHttpRequest; if (f.open("PUT", o, !0), f.setRequestHeader("Content-Type", "application/json"), null != t && t.size > 0) for (let [e, o] of t) f.setRequestHeader(e, o); return i ? await e(f, r, !0, l, n) : e(f, r, !1, null, n) }, GET: async function (o, t, r, i) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "HTTP.GET: parameter 'url' must be defined!"; if (!(fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t) || t instanceof Map)) throw "HTTP.GET: parameter 'headers' type is invalid! Type should be Map!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(r)) throw "HTTP.GET: parameter 'message' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(i)) throw "HTTP.GET: parameter 'expectedResponseCode' must be defined!"; var l = new XMLHttpRequest; if (l.open("GET", o, !0), null != t && t.size > 0) for (let [e, o] of t) l.setRequestHeader(e, o); return await e(l, null, !0, r, i) } } }(), fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper || { IsNullOrUndefined: function (e) { return null == e || "string" == typeof e && 0 === e.length }, RemoveParenthesisFromGUID: function (e) { return fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) ? null : e = (e = e.replace("{", "")).replace("}", "") }, GenerateGUID: function () { return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) { var o = 16 * Math.random() | 0; return ("x" === e ? o : 3 & o | 8).toString(16) }) }, ShowProgressBar: function (e) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) && (e = "Loading, please wait..."), Xrm.Utility.showProgressIndicator(e) }, CloseProgressBar: function () { Xrm.Utility.closeProgressIndicator() }, GetEnvironmentVariable: function (e, o, t) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "Helper.GetEnvironmentVariable: parameter 'variableName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "Helper.GetEnvironmentVariable: parameter 'successCallBack' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(t)) throw "Helper.GetEnvironmentVariable: parameter 'errorCallBack' must be defined!"; (function (o, t) { return new Promise(function (r, i) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.WebAPI.CRUD.RetrieveMultiple(o, t, null, function (o) { 0 == o.entities.length && i("Helper.GetEnvironmentVariable: No Environment Variable found with name '" + e + "'"), o.entities.length > 1 && i("Helper.GetEnvironmentVariable: Multiple Environment Variables found with name '" + e + "'"); var t = 0 == o.entities.length || o.entities.length > 1 ? null : o.entities[0]; r(t) }, i) }) })("environmentvariablevalue", "?$select=value&$expand=EnvironmentVariableDefinitionId&$filter=(EnvironmentVariableDefinitionId/schemaname%20eq%20'" + e + "')").then(e => { o(e) }, e => { t(e) }) }, ExecuteAndAwaitAsync: async function (e, o, t, r) { const i = new Promise((t, r) => { try { t(e(o)) } catch (e) { r(e) } }); await i.then(t, r) }, GetWebresourceLocalizedString: function (e, o) { if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e)) throw "Helper.GetWebresourceLocalizedString: parameter 'webresourceName' must be defined!"; if (fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(o)) throw "Helper.GetWebresourceLocalizedString: parameter 'key' must be defined!"; return Xrm.Utility.getResourceString(e, o) } }, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Logger || { Info: function (e) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) || window.console.log(e) }, Warning: function (e) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) || window.console.warn(e) }, Error: function (e) { fmfi.PowerPlatform.DeveloperToolkit.JsLib.Helper.IsNullOrUndefined(e) || window.console.error(e) } }, fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums = fmfi.PowerPlatform.DeveloperToolkit.JsLib.Enums || { EntityDataModel_PrimitiveType: { BINARY: "Edm.Binary", BOOLEAN: "Edm.Boolean", BYTE: "Edm.Byte", DATETIME: "Edm.DateTime", DECIMAL: "Edm.Decimal", DOUBLE: "Edm.Double", GUID: "Edm.Guid", INT16: "Edm.Int16", INT32: "Edm.Int32", INT64: "Edm.Int64", SBYTE: "Edm.SByte", SINGLE: "Edm.Single", STRING: "Edm.String", TIME: "Edm.Time", DATETIMEOFFSET: "Edm.DateTimeOffset" }, EntityDataModel_StructuralType: { UNKNOWN: 0, PRIMITIVETYPE: 1, COMPLEXTYPE: 2, ENUMERATIONTYPE: 3, COLLECTION: 4, ENTITYTYPE: 5 }, WebAPI_RequestType: { ACTION: 0, FUNCTION: 1 }, SidePane_State: { COLLAPSED: 0, EXPANDED: 1 }, FormNotification_Type: { ERROR: "ERROR", WARNING: "WARNING", INFO: "WARNING" }, GlobalNotification_Type: { SUCCESS: 1, ERROR: 2, WARNING: 3, INFORMATION: 4 }, FormType: { UNDEFINED: 0, CREATE: 1, UPDATE: 2, READONLY: 3, DISABLED: 4, BULKEDIT: 5 }, FieldRequirement_Level: { NONE: "none", REQUIRED: "required", RECOMMENDED: "recommended" }, Field_SubmitModes: { ALWAYS: "always", NEVER: "never", DIRTY: "dirty" }, InAppNotification_IconType: { INFO: 1e8, SUCCESS: 100000001, FAILURE: 100000002, WARNING: 100000003, MENTION: 100000004, CUSTOM: 100000005 }, InAppNotification_NavigationTarget: { DIALOG: "dialog", INLINE: "inline", NEWWINDOW: "newWindow" }, XMLHttpRequest_ReadyState: { UNSENT: 0, OPENED: 1, HEADERS_RECEIVED: 2, LOADING: 3, DONE: 4 }, Field_AttributeType: { BOOLEAN: "boolean", DATETIME: "datetime", DECIMAL: "decimal", DOUBLE: "double", INTEGER: "integer", LOOKUP: "lookup", MEMO: "memo", MONEY: "money", CHOICES: "multiselectoptionset", CHOICE: "optionset", STRING: "string" }, CustomPageType: { INLINE: 1, DIALOG: 2, SIDEDIALOG: 3 } };